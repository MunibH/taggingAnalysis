function [in,rez] = Subspace_SingleTrialElsayed(in,obj,move_,sesspar,meta,params)

warning('off', 'manopt:getHessian:approx')

disp('Identifying Null and Potent Subspaces using SingleTrialElsayed for:')
disp([meta.anm ' ' meta.date ' ' meta.region])

%%

in.nProbes = numel(obj.psth);

%% Gather trials 

if strcmpi(in.trials,'all')
    trials = 1:obj.bp.Ntrials;
else
    % ensure trials is not string or char
    if isstring(in.trials) || ischar(in.trials)
        error('in.trials must be `all` or numeric conditions')
    end
    
    % get trials to use, balancing right and left trials
    trials_cond = sesspar.trialid(in.trials);
    all_trials = cell2mat(trials_cond');
    right_trials = all_trials(logical(obj.bp.R(all_trials)));
    left_trials = all_trials(logical(obj.bp.L(all_trials)));

    minTrials = min(numel(right_trials),numel(left_trials));
    
    right_trials = randsample(right_trials,minTrials,false);
    left_trials = randsample(left_trials,minTrials,false);

    trials = sort([right_trials ; left_trials]); 
end

%% Moving and stationary epochs

if in.delayOnly
    delay_t(1) = mode(obj.bp.ev.delay) - 2.5;
    delay_t(2) = mode(obj.bp.ev.goCue) - 0.02 - 2.5;
    ix = findTimeIX(obj.time,delay_t);
elseif in.responseOnly
    rt(1) = mode(obj.bp.ev.goCue) + 1 - 2.5;
    rt(2) = mode(obj.bp.ev.goCue) - 2.5;
    ix = findTimeIX(obj.time,rt);
else
    ix = 1:numel(obj.time);
end

% movement mask based off motion energy and threshold (me.move comes from loadMotionEnergy() )
mask = move_(ix,trials);
mask = mask(:); % (time*trials) , 1 where animal is moving, 0 where animal is quiet

% sample same number of move and non-move time points
nMove = sum(mask);
nNonMove = sum(~mask);
minCount = min(nMove,nNonMove);
moveix = find(mask);
nonmoveix = find(~mask);

moveix = sort(moveix(randperm(numel(moveix), minCount)));
nonmoveix = sort(nonmoveix(randperm(numel(nonmoveix), minCount)));

%% Get neural data

    
% sample equal number of tag and nontag units
q = cellfun(@(x)ismember(x,'tagged'),sesspar.quality,'uni',0);
nTag = sum(cell2mat(cellfun(@(x) sum(x),q,'uni',0)));
nNonTag = sum(cell2mat(cellfun(@(x) sum(~x),q,'uni',0)));
nSample = max(5, min(nTag,nNonTag));
% if nSample is less than 5, sample at least 5 of tag and nontag units
% with replacement. SID will be poor with less than ~10 units


if in.nProbes > 1
    % concatenate dual probes since they're same region, opposite
    % hemisphere
    input_data = cat(2,obj.trialdat{1},obj.trialdat{2}); 
    in.basemu = [obj.baseline{1}.mu ; obj.baseline{2}.mu];
    in.basesd = [obj.baseline{1}.sigma ; obj.baseline{2}.sigma];
    quals = cat(1,sesspar.quality{1},sesspar.quality{2});
else
    input_data = obj.trialdat{1};
    in.basemu = obj.baseline{1}.mu;
    in.basesd = obj.baseline{1}.sigma;
    quals = sesspar.quality{1};
end
input_data = permute(input_data,[1 3 2]); % (time,trials,units)

% preprocess input_data (zscore with baseline stats)
input_data_zscored = ZscoreFiringRate(input_data,in.basemu,in.basesd);



% single trial neural data
in.data.raw = input_data;
in.data.zscored = input_data_zscored;

in.dims = size(in.data.raw);
in.data.zscored_reshaped = reshape(in.data.zscored,in.dims(1)*in.dims(2),in.dims(3));

in.data.null = in.data.zscored_reshaped(nonmoveix,:);
in.data.potent = in.data.zscored_reshaped(moveix,:);

% calculate move and nonmove mean firing rates
input_re = reshape(input_data,in.dims(1)*in.dims(2),in.dims(3));
input_re_nonmove = input_re(nonmoveix,:);
input_re_move = input_re(moveix,:);
rez.fr.null = mean(input_re_nonmove,1)';
rez.fr.potent = mean(input_re_move,1)';

%% Covariances

in.C.null = cov(in.data.null);
in.C.potent = cov(in.data.potent);

%% Dimensionality

% either perform parallel analysis or load results of previous parallel analysis runs 
fn = [meta.anm '_' meta.date '_numNullPotentDims'];
fpth = in.dimpth;
if in.estimateDimensionality
    disp('Estimating number of null and potent dimensions')
    disp('Null:')
    dims.null = ParallelAnalysis(in.data.null);
    disp('Potent:')
    dims.potent = ParallelAnalysis(in.data.potent);
    if inpar.saveDimensionality
        SaveResults(fpth,fn,dims);
    end

else    
    load(fullfile(fpth,fn))
end

% cap dimensionality at 20
if exist('dims','var')
    in.nPotentDim = min(20,dims.potent);
    in.nNullDim = min(20,dims.null);
end

% a = {'zscored_reshaped','null','potent'};
% for i = 1:numel(a)
%     [coeff,score,latent,tsquared,explained(:,i),mu] = pca(in.data.(a{i}));
% end
% figure; 
% hold on;
% for i = 1:3
%     this = cumsum(explained(:,i));
%     plot(this)
%     % scatter(1:numel(this),this)
% end


%% Subspace ID
% main optimization step
[Q,~,P,~,~] = orthogonal_subspaces(in.C.potent,in.nPotentDim, ...
                                   in.C.null,in.nNullDim,in.alpha);

rez.Q.potent = Q*P{1}; % potent subspace weights
rez.Q.null = Q*P{2};   % null subspace weights


end











